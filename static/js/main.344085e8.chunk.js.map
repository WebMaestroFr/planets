{"version":3,"sources":["objects/planet/index.tsx","components/Planet/Tile.tsx","components/Planet/index.tsx","hooks/tiles.ts","contexts/controls/index.tsx","contexts/controls/Provider.tsx","contexts/settings/index.tsx","components/Planet/Form.tsx","contexts/settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toGeographicalCoordinates","phi","theta","MathUtils","radToDeg","toSphericalCoordinates","lng","lat","degToRad","toSphericalDistribution","u","v","Math","PI","acos","PlanetTile","center","polygon","props","usePlanet","biomes","elevationOffset","elevationScale","noiseMin","radius","biome","useMemo","find","b","noise","noiseMax","polygonNoises","map","point","polygonPositions","position","applyNoise","useCallback","vertex","elevation","max","setLength","getElevationNoise","applyElevation","tile","centerElevation","index","length","elevationNoise","applyPolygon","origin","set","copy","ref","useUpdate","vertices","geometry","slice","name","args","color","PlanetContext","createContext","useContext","Planet","settings","useRef","tiles","useState","setTiles","poisson","PoissonDiskSampling","shape","minDistance","tries","seedrandom","seed","simplex","SimplexNoise","clone","noiseRadius","x","y","z","noise3D","toTilePoint","Vector3","setFromSphericalCoords","useEffect","sphericalCoordinates","fill","geographicalCoordinates","delaunay","geoDelaunay","points","centers","timeKey","Date","now","toString","nextTiles","polygons","key","p","useTiles","useFrame","current","rotation","Provider","value","Tile","Controls","extend","OrbitControls","ControlsProvider","children","useThree","camera","gl","update","domElement","DEFAULT_SETTINGS","planet","Settings","useSettings","PlanetForm","onUpdate","handleChange","currentTarget","prevSettings","handleValueChange","className","label","defaultValue","onChange","min","onValueChange","minorStepSize","stepSize","labelStepSize","SettingsProvider","initialValue","time","setValue","debouncedValue","setDebouncedValue","debounce","setTimeout","clearTimeout","useDebounce","debouncedPlanet","setPlanet","AppScene","AppCanvas","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.344085e8.chunk.js","sourcesContent":["import { MathUtils, Vector3 } from \"three\";\nimport {\n  GeographicalCoordinates,\n  PlanetTilePolygon,\n  SphericalCoordinates,\n} from \"./planet\";\n\nexport const getTile = (vertices: Vector3[]): PlanetTilePolygon => ({\n  center: vertices[vertices.length - 1],\n  origin: vertices[0],\n  polygon: vertices.slice(1, vertices.length - 1),\n});\n\nexport const toGeographicalCoordinates = ([\n  phi,\n  theta,\n]: SphericalCoordinates): GeographicalCoordinates => [\n  MathUtils.radToDeg(theta),\n  90 - MathUtils.radToDeg(phi),\n];\nexport const toSphericalCoordinates = ([\n  lng,\n  lat,\n]: GeographicalCoordinates): SphericalCoordinates => [\n  MathUtils.degToRad(90 - lat),\n  MathUtils.degToRad(lng),\n];\n// https://www.jasondavies.com/maps/random-points/\nexport const toSphericalDistribution = ([u, v]: [\n  number,\n  number\n]): SphericalCoordinates => [\n  Math.PI - Math.acos(2 * v - 1),\n  2 * Math.PI * u - Math.PI,\n];\n","import React, { FC, useCallback, useMemo } from \"react\";\nimport { useUpdate } from \"react-three-fiber\";\nimport { ConeGeometry, Material, Mesh, Vector3 } from \"three\";\nimport { usePlanet } from \".\";\nimport { getTile } from \"../../objects/planet\";\nimport {\n  PlanetTilePoint,\n  PlanetTilePolygon,\n} from \"../../objects/planet/planet\";\n\nconst PlanetTile: FC<{\n  center: PlanetTilePoint;\n  polygon: PlanetTilePoint[];\n}> = ({ center, polygon, ...props }) => {\n  const {\n    biomes,\n    elevationOffset,\n    elevationScale,\n    noiseMin,\n    radius,\n  } = usePlanet();\n\n  const biome = useMemo(\n    () =>\n      biomes.find(\n        (b) => center.noise <= noiseMin + b.noiseMax * (1 - noiseMin)\n      ),\n    [biomes, center.noise, noiseMin]\n  );\n\n  const polygonNoises = useMemo(() => polygon.map((point) => point.noise), [\n    polygon,\n  ]);\n\n  const polygonPositions = useMemo(\n    () => polygon.map((point) => point.position),\n    [polygon]\n  );\n\n  const applyNoise = useCallback(\n    (vertex: Vector3, noise: number) => {\n      const elevation = radius + Math.max(noiseMin, noise) * elevationScale;\n      vertex.setLength(elevation);\n      return elevation;\n    },\n    [elevationScale, noiseMin, radius]\n  );\n\n  const getElevationNoise = useCallback(\n    (noise: number) =>\n      center.noise * elevationOffset + noise * (1 - elevationOffset),\n    [center.noise, elevationOffset]\n  );\n\n  const applyElevation = useCallback(\n    (tile: PlanetTilePolygon) => {\n      const centerElevation = applyNoise(tile.center, center.noise);\n      if (center.noise <= noiseMin) {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          tile.polygon[index].setLength(centerElevation);\n        }\n      } else {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          const elevationNoise = getElevationNoise(polygonNoises[index]);\n          applyNoise(tile.polygon[index], elevationNoise);\n        }\n      }\n    },\n    [applyNoise, center.noise, getElevationNoise, polygonNoises, noiseMin]\n  );\n\n  const applyPolygon = useCallback(\n    (tile: PlanetTilePolygon) => {\n      tile.origin.set(0, 0, 0);\n      tile.center.copy(center.position);\n      for (let index = 0; index < tile.polygon.length; index++) {\n        tile.polygon[index].copy(polygonPositions[index]);\n      }\n    },\n    [center.position, polygonPositions]\n  );\n\n  const ref = useUpdate<Mesh<ConeGeometry, Material>>(\n    ({ geometry }) => {\n      const tile = getTile(geometry.vertices);\n      applyPolygon(tile);\n      applyElevation(tile);\n    },\n    [applyElevation, applyPolygon]\n  );\n\n  return (\n    <mesh name=\"PlanetTile\" {...props} ref={ref}>\n      <coneGeometry args={[1, 1, polygon.length]} />\n      <meshLambertMaterial color={biome?.color} />\n    </mesh>\n  );\n};\n\nexport default PlanetTile;\n","import React, { createContext, FC, useContext, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Group } from \"three\";\nimport { useTiles } from \"../../hooks/tiles\";\nimport { PlanetSettings } from \"../../objects/planet/planet\";\nimport Tile from \"./Tile\";\n\nconst PlanetContext = createContext<PlanetSettings>({} as PlanetSettings);\nexport const usePlanet = () => useContext(PlanetContext);\n\nexport const Planet: FC<{ settings: PlanetSettings }> = ({ settings }) => {\n  const ref = useRef<Group>();\n  const tiles = useTiles(settings);\n\n  useFrame(() => {\n    if (ref && ref.current) {\n      ref.current.rotation.y += 0.005;\n    }\n  });\n\n  return (\n    <group name=\"Planet\" ref={ref}>\n      <PlanetContext.Provider value={settings}>\n        {tiles.map((tile) => (\n          <Tile key={tile.key} center={tile.center} polygon={tile.polygon} />\n        ))}\n      </PlanetContext.Provider>\n    </group>\n  );\n};\n\nexport default Planet;\n","import { geoDelaunay } from \"d3-geo-voronoi\";\nimport PoissonDiskSampling from \"poisson-disk-sampling\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport SimplexNoise from \"simplex-noise\";\nimport { Vector3 } from \"three\";\nimport {\n  toGeographicalCoordinates,\n  toSphericalCoordinates,\n  toSphericalDistribution,\n} from \"../objects/planet\";\nimport {\n  GeographicalCoordinates,\n  PlanetSettings,\n  PlanetTile,\n  PlanetTilePoint,\n  SphericalCoordinates,\n} from \"../objects/planet/planet\";\n\nexport function useTiles(settings: PlanetSettings) {\n  const [tiles, setTiles] = useState<PlanetTile[]>([]);\n\n  const poisson = useMemo(\n    () =>\n      new PoissonDiskSampling(\n        {\n          shape: [1.0, 1.0],\n          minDistance: Math.max(settings.minDistance, 0.01),\n          tries: Math.max(settings.tries, 2),\n        },\n        seedrandom(settings.seed)\n      ),\n    [settings]\n  );\n\n  const simplex = useMemo(() => new SimplexNoise(settings.seed), [settings]);\n  const noise = useCallback(\n    (point: Vector3) => {\n      const { x, y, z } = point.clone().setLength(settings.noiseRadius);\n      return simplex.noise3D(x, y, z);\n    },\n    [settings, simplex]\n  );\n\n  const toTilePoint = useCallback(\n    ([phi, theta]: SphericalCoordinates): PlanetTilePoint => {\n      const position = new Vector3();\n      position.setFromSphericalCoords(1, phi, theta);\n      return { noise: noise(position), position };\n    },\n    [noise]\n  );\n\n  useEffect(() => {\n    const sphericalCoordinates = poisson.fill().map(toSphericalDistribution);\n    const geographicalCoordinates = sphericalCoordinates.map(\n      toGeographicalCoordinates\n    );\n    const delaunay: {\n      centers: GeographicalCoordinates[];\n      polygons: number[][];\n    } = geoDelaunay(geographicalCoordinates);\n    const points = delaunay.centers\n      .map(toSphericalCoordinates)\n      .map(toTilePoint);\n    const timeKey = Date.now().toString();\n    const nextTiles = delaunay.polygons.map((polygon, index) => {\n      const center = toTilePoint(sphericalCoordinates[index]);\n      return {\n        center,\n        key: `${timeKey}-${index}`,\n        polygon: polygon.map((p) => points[p]),\n      };\n    });\n    setTiles(nextTiles);\n  }, [poisson, toTilePoint]);\n\n  return tiles;\n}\n","import { createContext, useContext } from \"react\";\nimport { ControlsContext } from \"./controls\";\n\nexport const Controls = createContext<ControlsContext | null>(null);\n\nconst useControls = () => useContext(Controls) as ControlsContext;\nexport default useControls;\n","import React, { FC, useRef } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Controls } from \"./index\";\nimport { ControlsProps } from \"./controls\";\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\n\nextend({ OrbitControls });\n\nexport const ControlsProvider: FC<ControlsProps> = ({ children, ...props }) => {\n  const ref = useRef<OrbitControls>();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    if (ref && ref.current) {\n      ref.current.update();\n    }\n  });\n\n  return (\n    <Controls.Provider value={props}>\n      <orbitControls args={[camera, gl.domElement]} ref={ref} />\n      {children}\n    </Controls.Provider>\n  );\n};\n\nexport default ControlsProvider;\n","import { createContext, useContext } from \"react\";\nimport { SettingsContext } from \"./settings\";\n\nexport const DEFAULT_SETTINGS: SettingsContext = {\n  planet: {\n    biomes: [\n      { color: \"steelblue\", noiseMax: 0 },\n      { color: \"lemonchiffon\", noiseMax: 1 / 6 },\n      { color: \"yellowgreen\", noiseMax: 2 / 6 },\n      { color: \"forestgreen\", noiseMax: 3 / 6 },\n      { color: \"burlywood\", noiseMax: 4 / 6 },\n      { color: \"darkgrey\", noiseMax: 5 / 6 },\n      { color: \"snow\", noiseMax: 1 },\n    ],\n    elevationOffset: 1 / 2,\n    elevationScale: 1,\n    noiseMin: 0,\n    noiseRadius: 1,\n    minDistance: 0.02,\n    position: [0, 0, 0],\n    radius: 8,\n    seed: Date.now().toString(),\n    tries: 8,\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(DEFAULT_SETTINGS);\n\nconst useSettings = () => useContext(Settings);\nexport default useSettings;\n","import React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n} from \"react\";\nimport { FormGroup, InputGroup, NumericInput, Slider } from \"@blueprintjs/core\";\nimport { PlanetSettings } from \"../../objects/planet/planet\";\n\nexport const PlanetForm: FC<{\n  onUpdate: Dispatch<SetStateAction<PlanetSettings>>;\n  settings: PlanetSettings;\n}> = ({\n  onUpdate,\n  settings: {\n    elevationOffset,\n    elevationScale,\n    minDistance,\n    noiseMin,\n    noiseRadius,\n    radius,\n    seed,\n    tries,\n  },\n}) => {\n  const handleChange = useCallback(\n    (key: string) => ({\n      currentTarget: { value },\n    }: ChangeEvent<HTMLInputElement>) => {\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n    },\n    [onUpdate]\n  );\n  const handleValueChange = useCallback(\n    (key: string) => (value: number) => {\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n    },\n    [onUpdate]\n  );\n  return (\n    <form className=\"PlanetForm\">\n      <FormGroup className=\"PlanetForm-seed\" label=\"Seed\">\n        <InputGroup\n          defaultValue={seed}\n          fill={true}\n          onChange={handleChange(\"seed\")}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-radius\" label=\"Radius\">\n        <NumericInput\n          fill={true}\n          min={0}\n          onValueChange={handleValueChange(\"radius\")}\n          value={radius}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"PlanetForm-minDistance\"\n        label=\"Sampling Minimum Distance\"\n      >\n        <NumericInput\n          fill={true}\n          min={0.01}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"minDistance\")}\n          stepSize={0.01}\n          value={minDistance}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-tries\" label=\"Sampling tries\">\n        <NumericInput\n          fill={true}\n          min={2}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"tries\")}\n          value={tries}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-noiseRadius\" label=\"Noise Radius\">\n        <NumericInput\n          fill={true}\n          min={0}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"noiseRadius\")}\n          stepSize={0.1}\n          value={noiseRadius}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-noiseMin\" label=\"Minimum Noise\">\n        <Slider\n          labelStepSize={0.5}\n          max={1}\n          min={-1}\n          onChange={handleValueChange(\"noiseMin\")}\n          stepSize={0.1}\n          value={noiseMin}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"PlanetForm-elevationOffset\"\n        label=\"Elevation Offset\"\n      >\n        <Slider\n          labelStepSize={0.25}\n          max={1}\n          min={0}\n          onChange={handleValueChange(\"elevationOffset\")}\n          stepSize={0.01}\n          value={elevationOffset}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-elevationScale\" label=\"Elevation Scale\">\n        <NumericInput\n          fill={true}\n          min={0}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"elevationScale\")}\n          stepSize={0.1}\n          value={elevationScale}\n        />\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default PlanetForm;\n","import React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport { DEFAULT_SETTINGS, Settings } from \"./index\";\nimport PlanetForm from \"../../components/Planet/Form\";\nimport { PlanetSettings } from \"../../objects/planet/planet\";\n\nfunction useDebounce<T>(\n  initialValue: T,\n  time: number\n): [T, T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    const debounce = setTimeout(() => {\n      setDebouncedValue(value);\n    }, time);\n    return () => {\n      clearTimeout(debounce);\n    };\n  }, [value, time]);\n\n  return [debouncedValue, value, setValue];\n}\n\nexport const SettingsProvider: FC = ({ children, ...props }) => {\n  const [debouncedPlanet, planet, setPlanet] = useDebounce<PlanetSettings>(\n    DEFAULT_SETTINGS[\"planet\"],\n    400\n  );\n\n  return (\n    <Settings.Provider value={{ planet: debouncedPlanet }} {...props}>\n      {children}\n      <div className=\"Settings\">\n        <PlanetForm onUpdate={setPlanet} settings={planet} />\n      </div>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { FC, useEffect } from \"react\";\nimport { Canvas, useThree } from \"react-three-fiber\";\nimport Planet from \"./components/Planet\";\nimport ControlsProvider from \"./contexts/controls/Provider\";\nimport useSettings, { Settings } from \"./contexts/settings\";\nimport SettingsProvider from \"./contexts/settings/Provider\";\n\nexport const AppScene: FC = () => {\n  const settings = useSettings();\n  const { camera } = useThree();\n\n  useEffect(() => {\n    camera.position.set(0, 0, -settings.planet.radius * 2);\n  }, [camera.position, settings.planet.radius]);\n\n  return (\n    <ControlsProvider>\n      <pointLight\n        position={[\n          -settings.planet.radius,\n          -settings.planet.radius,\n          -settings.planet.radius,\n        ]}\n      />\n      <Planet settings={settings.planet} />\n    </ControlsProvider>\n  );\n};\n\nconst AppCanvas: FC = () => {\n  const settings = useSettings();\n  return (\n    <Canvas className=\"AppCanvas\">\n      <Settings.Provider value={settings}>\n        <AppScene />\n      </Settings.Provider>\n    </Canvas>\n  );\n};\n\nconst App: FC = () => {\n  return (\n    <SettingsProvider>\n      <AppCanvas />\n    </SettingsProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}