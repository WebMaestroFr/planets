{"version":3,"sources":["contexts/planet/index.tsx","contexts/settings/index.tsx","components/Tile/Geometry.tsx","components/Tile/index.tsx","contexts/planet/Provider.tsx","components/Planet/index.tsx","contexts/controls/index.tsx","contexts/controls/Provider.tsx","contexts/settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Planet","createContext","toGeographicalCoordinates","phi","theta","MathUtils","radToDeg","toSphericalCoordinates","lng","lat","degToRad","toSphericalDistribution","u","v","Math","PI","acos","Context","useContext","defaultSettings","planet","biomes","color","noiseMax","elevationOffset","elevationScale","noiseDistanceX","noiseDistanceY","noiseDistanceZ","noiseMin","noiseRadius","noiseScaleX","noiseScaleY","noiseScaleZ","minDistance","position","radius","seed","Date","now","toString","tries","Settings","TileGeometry","center","polygon","props","ref","useUpdate","vertices","tile","getTile","set","origin","index","length","copy","add","divideScalar","args","name","slice","TileMesh","useSettings","noise","usePlanet","useState","setColor","applyNoise","useCallback","vertex","Infinity","elevation","max","setLength","applyElevation","centerNoise","centerElevation","pointNoise","elevationNoise","geometry","biome","find","c","PlanetProvider","children","settings","loading","setLoading","tiles","setTiles","poisson","useMemo","PoissonDiskSampling","shape","seedrandom","simplex","SimplexNoise","x","y","z","noise3D","toNoiseVertex","Vector3","setFromSphericalCoords","useEffect","sphericalCoordinates","fill","map","geographicalCoordinates","delaunay","geoDelaunay","points","centers","nextTiles","polygons","p","Provider","value","PlanetTiles","time","scale","Tile","Controls","extend","OrbitControls","ControlsProvider","useRef","useThree","camera","gl","useFrame","current","update","domElement","SettingsProvider","key","setPlanet","onValueChange","prevSettings","className","label","defaultValue","onChange","currentTarget","min","minorStepSize","stepSize","labelStepSize","vertical","Scene","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39616444.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\nimport { MathUtils } from \"three\";\nimport {\n  GeographicalCoordinates,\n  PlanetContext,\n  SphericalCoordinates,\n} from \"./planet\";\n\nexport const Planet = createContext<PlanetContext | null>(null);\n\nexport const toGeographicalCoordinates = ([\n  phi,\n  theta,\n]: SphericalCoordinates): GeographicalCoordinates => [\n  MathUtils.radToDeg(theta),\n  90 - MathUtils.radToDeg(phi),\n];\nexport const toSphericalCoordinates = ([\n  lng,\n  lat,\n]: GeographicalCoordinates): SphericalCoordinates => [\n  MathUtils.degToRad(90 - lat),\n  MathUtils.degToRad(lng),\n];\nexport const toSphericalDistribution = ([u, v]: [\n  number,\n  number\n]): SphericalCoordinates => [\n  Math.PI - Math.acos(2 * v - 1),\n  2 * Math.PI * u - Math.PI,\n];\n\nconst Context = () => useContext(Planet) as PlanetContext;\nexport default Context;\n","import { createContext, useContext } from \"react\";\nimport { SettingsContext } from \"./settings\";\n\nexport const defaultSettings: SettingsContext = {\n  planet: {\n    biomes: [\n      { color: \"steelblue\", noiseMax: 0 },\n      { color: \"lemonchiffon\", noiseMax: 0.2 },\n      { color: \"yellowgreen\", noiseMax: 0.4 },\n      { color: \"forestgreen\", noiseMax: 0.6 },\n      { color: \"burlywood\", noiseMax: 0.8 },\n      { color: \"snow\", noiseMax: 1 },\n    ],\n    elevationOffset: 0.5,\n    elevationScale: 0.5 / 3,\n    noiseDistanceX: 0,\n    noiseDistanceY: 0,\n    noiseDistanceZ: 0,\n    noiseMin: 0,\n    noiseRadius: 1,\n    noiseScaleX: 1,\n    noiseScaleY: 1,\n    noiseScaleZ: 1,\n    minDistance: 0.04,\n    position: [0, 0, 0],\n    radius: 1,\n    seed: Date.now().toString(),\n    tries: 8,\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(defaultSettings);\n\nconst Context = () => useContext(Settings);\nexport default Context;\n","import React, { FC } from \"react\";\nimport { useUpdate } from \"react-three-fiber\";\nimport { ConeGeometry } from \"three\";\nimport { getTile } from \".\";\nimport { PlanetTile } from \"../../contexts/planet/planet\";\n\nconst TileGeometry: FC<PlanetTile> = ({ center, polygon, ...props }) => {\n  const ref = useUpdate<ConeGeometry>(\n    ({ vertices }) => {\n      const tile = getTile(vertices);\n      tile.center.set(0, 0, 0);\n      tile.origin.set(0, 0, 0);\n      for (let index = 0; index < polygon.length; index++) {\n        tile.polygon[index].copy(polygon[index]);\n        tile.center.add(polygon[index]);\n      }\n      tile.center.divideScalar(polygon.length);\n    },\n    [center, polygon]\n  );\n  return (\n    <coneGeometry\n      args={[1, 1, polygon.length]}\n      name=\"TileGeometry\"\n      ref={ref}\n      {...props}\n    />\n  );\n};\n\nexport default TileGeometry;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { useUpdate } from \"react-three-fiber\";\nimport { Geometry, Mesh, Vector3 } from \"three\";\nimport usePlanet from \"../../contexts/planet\";\nimport { PlanetTile } from \"../../contexts/planet/planet\";\nimport useSettings from \"../../contexts/settings\";\nimport TileGeometry from \"./Geometry\";\n\nexport type Tile = { center: Vector3; origin: Vector3; polygon: Vector3[] };\nexport const getTile = (vertices: Vector3[]): Tile => ({\n  center: vertices[vertices.length - 1],\n  origin: vertices[0],\n  polygon: vertices.slice(1, vertices.length - 1),\n});\n\nconst TileMesh: FC<PlanetTile> = ({ center, polygon, ...props }) => {\n  const {\n    biomes,\n    elevationOffset,\n    elevationScale,\n    noiseMin,\n  } = useSettings().planet;\n  const { noise } = usePlanet();\n  const [color, setColor] = useState<string>();\n\n  const applyNoise = useCallback(\n    (vertex: Vector3, noise: number = -Infinity) => {\n      const elevation = 1 + Math.max(noiseMin, noise) * elevationScale;\n      vertex.setLength(elevation);\n      return elevation;\n    },\n    [elevationScale, noiseMin]\n  );\n\n  const applyElevation = useCallback(\n    (tile: Tile): number => {\n      const centerNoise = noise(center);\n      const centerElevation = applyNoise(tile.center, centerNoise);\n      if (centerNoise <= noiseMin) {\n        for (let index = 0; index < polygon.length; index++) {\n          tile.polygon[index].setLength(centerElevation);\n        }\n      } else {\n        for (let index = 0; index < polygon.length; index++) {\n          const pointNoise = noise(polygon[index]);\n          const elevationNoise =\n            centerNoise * elevationOffset + pointNoise * (1 - elevationOffset);\n          applyNoise(tile.polygon[index], elevationNoise);\n        }\n      }\n      return centerNoise;\n    },\n    [applyNoise, center, elevationOffset, noise, noiseMin, polygon]\n  );\n\n  const ref = useUpdate<Mesh<Geometry>>(\n    ({ geometry: { vertices } }) => {\n      const tile = getTile(vertices);\n      const centerNoise = applyElevation(tile);\n      const biome = biomes.find((c) => centerNoise <= c.noiseMax);\n      if (biome) {\n        setColor(biome.color);\n      }\n    },\n    [applyElevation]\n  );\n\n  return (\n    <mesh name=\"TileMesh\" ref={ref} {...props}>\n      <meshStandardMaterial color={color} />\n      <TileGeometry center={center} polygon={polygon} />\n    </mesh>\n  );\n};\n\nexport default TileMesh;\n","import { geoDelaunay } from \"d3-geo-voronoi\";\nimport PoissonDiskSampling from \"poisson-disk-sampling\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport SimplexNoise from \"simplex-noise\";\nimport { Vector3 } from \"three\";\nimport useSettings from \"../settings\";\nimport {\n  Planet,\n  toGeographicalCoordinates,\n  toSphericalCoordinates,\n  toSphericalDistribution,\n} from \"./index\";\nimport {\n  GeographicalCoordinates,\n  PlanetTile,\n  SphericalCoordinates,\n} from \"./planet\";\n\n// https://www.jasondavies.com/maps/random-points/\n\nexport const PlanetProvider: FC = ({ children }) => {\n  const settings = useSettings().planet;\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [tiles, setTiles] = useState<PlanetTile[]>([]);\n\n  const poisson = useMemo(\n    () =>\n      new PoissonDiskSampling(\n        {\n          shape: [1.0, 1.0],\n          minDistance: settings.minDistance,\n          tries: settings.tries,\n        },\n        seedrandom(settings.seed)\n      ),\n    [settings.minDistance, settings.tries, settings.seed]\n  );\n\n  const simplex = useMemo(() => new SimplexNoise(settings.seed), [\n    settings.seed,\n  ]);\n  const noise = useCallback(\n    ({ x, y, z }: Vector3) =>\n      simplex.noise3D(\n        (x + settings.noiseDistanceX) * settings.noiseScaleX,\n        (y + settings.noiseDistanceY) * settings.noiseScaleY,\n        (z + settings.noiseDistanceZ) * settings.noiseScaleZ\n      ),\n    [\n      settings.noiseDistanceX,\n      settings.noiseDistanceY,\n      settings.noiseDistanceZ,\n      settings.noiseScaleX,\n      settings.noiseScaleY,\n      settings.noiseScaleZ,\n      simplex,\n    ]\n  );\n\n  const toNoiseVertex = useCallback(\n    ([phi, theta]: SphericalCoordinates): Vector3 => {\n      const vertex = new Vector3();\n      return vertex.setFromSphericalCoords(settings.noiseRadius, phi, theta);\n    },\n    [settings.noiseRadius]\n  );\n\n  useEffect(() => {\n    const sphericalCoordinates = poisson.fill().map(toSphericalDistribution);\n    const geographicalCoordinates = sphericalCoordinates.map(\n      toGeographicalCoordinates\n    );\n    const delaunay: {\n      centers: GeographicalCoordinates[];\n      polygons: number[][];\n    } = geoDelaunay(geographicalCoordinates);\n    const points = delaunay.centers\n      .map(toSphericalCoordinates)\n      .map(toNoiseVertex);\n    const nextTiles = delaunay.polygons.map((polygon, c) => ({\n      center: toNoiseVertex(sphericalCoordinates[c]),\n      polygon: polygon.map((p) => points[p]),\n    }));\n    setTiles(nextTiles);\n    setLoading(false);\n  }, [poisson, toNoiseVertex]);\n\n  return loading ? null : (\n    <Planet.Provider\n      value={{\n        noise,\n        tiles,\n      }}\n    >\n      {children}\n    </Planet.Provider>\n  );\n};\n\nexport default PlanetProvider;\n","import React, { FC, useMemo } from \"react\";\nimport TileMesh from \"../Tile\";\nimport usePlanet from \"../../contexts/planet\";\nimport useSettings from \"../../contexts/settings\";\nimport PlanetProvider from \"../../contexts/planet/Provider\";\nimport { Vector3 } from \"three\";\n\nconst PlanetTiles: FC = () => {\n  const { tiles } = usePlanet();\n  const { radius } = useSettings().planet;\n  // HACK key to force rerender\n  // TO DO : Test out how to clean this up\n  const time = Date.now().toString();\n\n  const scale = useMemo(() => new Vector3(radius, radius, radius), [radius]);\n\n  return (\n    <group name=\"PlanetTiles\" scale={scale}>\n      {tiles.map(({ center, polygon }, index) => (\n        <TileMesh key={`${time}-${index}`} center={center} polygon={polygon} />\n      ))}\n    </group>\n  );\n};\n\nconst Planet: FC = () => {\n  return (\n    <PlanetProvider>\n      <PlanetTiles />\n    </PlanetProvider>\n  );\n};\n\nexport default Planet;\n","import { createContext, useContext } from \"react\";\nimport { ControlsContext } from \"./controls\";\n\nexport const Controls = createContext<ControlsContext | null>(null);\n\nconst Context = () => useContext(Controls) as ControlsContext;\nexport default Context;\n","import React, { FC, useEffect, useRef } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Controls } from \"./index\";\nimport { ControlsProps } from \"./controls\";\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\n\nextend({ OrbitControls });\n\nexport const ControlsProvider: FC<ControlsProps> = ({ children, ...props }) => {\n  const ref = useRef<OrbitControls>();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    if (ref && ref.current) {\n      ref.current.update();\n    }\n  });\n\n  useEffect(() => {\n    camera.position.set(0, 0, 2);\n  }, [camera]);\n\n  return (\n    <Controls.Provider value={props}>\n      <orbitControls args={[camera, gl.domElement]} ref={ref} />\n      {children}\n    </Controls.Provider>\n  );\n};\n\nexport default ControlsProvider;\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport {\n  ControlGroup,\n  FormGroup,\n  InputGroup,\n  NumericInput,\n  Slider,\n} from \"@blueprintjs/core\";\nimport { defaultSettings, Settings } from \"./index\";\nimport { SettingsContext, SettingsProps } from \"./settings\";\n\nexport const SettingsProvider: FC<SettingsProps> = ({ children }) => {\n  const [planet, setPlanet] = useState<SettingsContext[\"planet\"]>(\n    defaultSettings[\"planet\"]\n  );\n  const onChange = (key: string) => ({\n    currentTarget: { value },\n  }: ChangeEvent<HTMLInputElement>) =>\n    setPlanet((prevSettings) => ({ ...prevSettings, [key]: value }));\n  // const onRangeChange = (keyMin: string, keyMax: string) => ([\n  //   valueMin,\n  //   valueMax,\n  // ]: [number, number]) =>\n  //   setPlanet((prevSettings) => ({\n  //     ...prevSettings,\n  //     [keyMax]: valueMax,\n  //     [keyMin]: valueMin,\n  //   }));\n  const onValueChange = (key: string) => (value: number) =>\n    setPlanet((prevSettings) => ({ ...prevSettings, [key]: value }));\n\n  return (\n    <Settings.Provider value={{ planet }}>\n      {children}\n      <form className=\"Settings\">\n        <FormGroup className=\"Settings-seed\" label=\"Seed\">\n          <InputGroup\n            defaultValue={planet.seed}\n            fill={true}\n            onChange={onChange(\"seed\")}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-radius\" label=\"Radius\">\n          <NumericInput\n            fill={true}\n            min={0.1}\n            minorStepSize={null}\n            onValueChange={onValueChange(\"radius\")}\n            stepSize={0.1}\n            value={planet.radius}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"Settings-minDistance\"\n          label=\"Sampling Minimum Distance\"\n        >\n          <Slider\n            labelStepSize={0.02}\n            max={0.08}\n            min={0.02}\n            onChange={onValueChange(\"minDistance\")}\n            stepSize={0.01}\n            value={planet.minDistance}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-tries\" label=\"Sampling tries\">\n          <Slider\n            labelStepSize={8}\n            max={24}\n            min={0}\n            onChange={onValueChange(\"tries\")}\n            stepSize={1}\n            value={planet.tries}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseRadius\" label=\"Noise Radius\">\n          <Slider\n            labelStepSize={0.8}\n            max={3.4}\n            min={0.2}\n            onChange={onValueChange(\"noiseRadius\")}\n            stepSize={0.01}\n            value={planet.noiseRadius}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseDistance\" label=\"Noise Distance\">\n          <ControlGroup fill={true} vertical={false}>\n            <NumericInput\n              fill={true}\n              onValueChange={onValueChange(\"noiseDistanceX\")}\n              stepSize={0.1}\n              value={planet.noiseDistanceX}\n            />\n            <NumericInput\n              fill={true}\n              onValueChange={onValueChange(\"noiseDistanceY\")}\n              stepSize={0.1}\n              value={planet.noiseDistanceY}\n            />\n            <NumericInput\n              fill={true}\n              onValueChange={onValueChange(\"noiseDistanceZ\")}\n              stepSize={0.1}\n              value={planet.noiseDistanceZ}\n            />\n          </ControlGroup>\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseScale\" label=\"Noise Scale\">\n          <ControlGroup fill={true} vertical={false}>\n            <NumericInput\n              fill={true}\n              min={0.2}\n              onValueChange={onValueChange(\"noiseScaleX\")}\n              stepSize={0.1}\n              value={planet.noiseScaleX}\n            />\n            <NumericInput\n              fill={true}\n              min={0.2}\n              onValueChange={onValueChange(\"noiseScaleY\")}\n              stepSize={0.1}\n              value={planet.noiseScaleY}\n            />\n            <NumericInput\n              fill={true}\n              min={0.2}\n              onValueChange={onValueChange(\"noiseScaleZ\")}\n              stepSize={0.1}\n              value={planet.noiseScaleZ}\n            />\n          </ControlGroup>\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseMin\" label=\"Minimum Noise\">\n          <Slider\n            labelStepSize={0.5}\n            max={1}\n            min={-1}\n            onChange={onValueChange(\"noiseMin\")}\n            stepSize={0.1}\n            value={planet.noiseMin}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"Settings-elevationOffset\"\n          label=\"Elevation Offset\"\n        >\n          <Slider\n            labelStepSize={0.25}\n            max={1}\n            min={0}\n            onChange={onValueChange(\"elevationOffset\")}\n            stepSize={0.01}\n            value={planet.elevationOffset}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-elevationScale\" label=\"Elevation Scale\">\n          <Slider\n            labelStepSize={0.25}\n            max={0.5}\n            min={0}\n            onChange={onValueChange(\"elevationScale\")}\n            stepSize={0.01}\n            value={planet.elevationScale}\n          />\n        </FormGroup>\n      </form>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { FC } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport Planet from \"./components/Planet\";\nimport ControlsProvider from \"./contexts/controls/Provider\";\nimport useSettings, { Settings } from \"./contexts/settings\";\nimport SettingsProvider from \"./contexts/settings/Provider\";\n\nconst Scene: FC = () => {\n  const settings = useSettings();\n  return (\n    <Canvas className=\"Scene\">\n      <Settings.Provider value={settings}>\n        <ambientLight />\n        <ControlsProvider>\n          <pointLight position={[10, 10, 10]} />\n          <Planet />\n        </ControlsProvider>\n      </Settings.Provider>\n    </Canvas>\n  );\n};\n\nconst App: FC = () => {\n  return (\n    <SettingsProvider>\n      <Scene />\n    </SettingsProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}