{"version":3,"sources":["objects/planet/index.tsx","components/Tile/Geometry.tsx","components/Tile/index.tsx","components/Planet/index.tsx","contexts/controls/index.tsx","contexts/controls/Provider.tsx","contexts/settings/index.tsx","contexts/settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toGeographicalCoordinates","phi","theta","MathUtils","radToDeg","toSphericalCoordinates","lng","lat","degToRad","toSphericalDistribution","u","v","Math","PI","acos","TileGeometry","center","polygon","settings","props","polygonNoises","useMemo","map","point","noise","polygonPositions","position","applyNoise","useCallback","vertex","elevation","radius","max","noiseMin","elevationScale","setLength","getElevationNoise","elevationOffset","applyElevation","tile","centerElevation","index","length","elevationNoise","applyPolygon","origin","set","copy","ref","useUpdate","vertices","slice","getTile","args","name","TileMesh","color","Planet","useState","tiles","setTiles","poisson","PoissonDiskSampling","shape","minDistance","tries","seedrandom","seed","simplex","SimplexNoise","clone","noiseRadius","x","y","z","noise3D","toTilePoint","Vector3","setFromSphericalCoords","useEffect","sphericalCoordinates","fill","geographicalCoordinates","delaunay","geoDelaunay","points","centers","nextTiles","polygons","c","biomes","find","noiseMax","p","timeKey","Date","now","toString","Tile","Controls","createContext","extend","OrbitControls","ControlsProvider","children","useRef","useThree","camera","gl","useFrame","current","update","Provider","value","domElement","defaultSettings","planet","Settings","Context","useContext","SettingsProvider","key","setPlanet","onValueChange","prevSettings","className","label","defaultValue","onChange","currentTarget","min","minorStepSize","stepSize","labelStepSize","Scene","useSettings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a7054ad.chunk.js","sourcesContent":["import { MathUtils, Vector3 } from \"three\";\nimport {\n  GeographicalCoordinates,\n  PlanetTilePolygon,\n  SphericalCoordinates,\n} from \"./planet\";\n\nexport const getTile = (vertices: Vector3[]): PlanetTilePolygon => ({\n  center: vertices[vertices.length - 1],\n  origin: vertices[0],\n  polygon: vertices.slice(1, vertices.length - 1),\n});\n\nexport const toGeographicalCoordinates = ([\n  phi,\n  theta,\n]: SphericalCoordinates): GeographicalCoordinates => [\n  MathUtils.radToDeg(theta),\n  90 - MathUtils.radToDeg(phi),\n];\nexport const toSphericalCoordinates = ([\n  lng,\n  lat,\n]: GeographicalCoordinates): SphericalCoordinates => [\n  MathUtils.degToRad(90 - lat),\n  MathUtils.degToRad(lng),\n];\n// https://www.jasondavies.com/maps/random-points/\nexport const toSphericalDistribution = ([u, v]: [\n  number,\n  number\n]): SphericalCoordinates => [\n  Math.PI - Math.acos(2 * v - 1),\n  2 * Math.PI * u - Math.PI,\n];\n","import React, { FC, useCallback, useMemo } from \"react\";\nimport { useUpdate } from \"react-three-fiber\";\nimport { ConeGeometry, Vector3 } from \"three\";\nimport { getTile } from \"../../objects/planet\";\nimport {\n  PlanetSettings,\n  PlanetTilePoint,\n  PlanetTilePolygon,\n} from \"../../objects/planet/planet\";\n\nconst TileGeometry: FC<{\n  center: PlanetTilePoint;\n  polygon: PlanetTilePoint[];\n  settings: PlanetSettings;\n}> = ({ center, polygon, settings, ...props }) => {\n  const polygonNoises = useMemo(() => polygon.map((point) => point.noise), [\n    polygon,\n  ]);\n\n  const polygonPositions = useMemo(\n    () => polygon.map((point) => point.position),\n    [polygon]\n  );\n\n  const applyNoise = useCallback(\n    (vertex: Vector3, noise: number) => {\n      const elevation =\n        settings.radius +\n        Math.max(settings.noiseMin, noise) * settings.elevationScale;\n      vertex.setLength(elevation);\n      return elevation;\n    },\n    [settings.elevationScale, settings.noiseMin, settings.radius]\n  );\n\n  const getElevationNoise = useCallback(\n    (noise: number) =>\n      center.noise * settings.elevationOffset +\n      noise * (1 - settings.elevationOffset),\n    [center.noise, settings.elevationOffset]\n  );\n\n  const applyElevation = useCallback(\n    (tile: PlanetTilePolygon) => {\n      const centerElevation = applyNoise(tile.center, center.noise);\n      if (center.noise <= settings.noiseMin) {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          tile.polygon[index].setLength(centerElevation);\n        }\n      } else {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          const elevationNoise = getElevationNoise(polygonNoises[index]);\n          applyNoise(tile.polygon[index], elevationNoise);\n        }\n      }\n    },\n    [\n      applyNoise,\n      center.noise,\n      getElevationNoise,\n      polygonNoises,\n      settings.noiseMin,\n    ]\n  );\n\n  const applyPolygon = useCallback(\n    (tile: PlanetTilePolygon) => {\n      tile.origin.set(0, 0, 0);\n      tile.center.copy(center.position);\n      for (let index = 0; index < tile.polygon.length; index++) {\n        tile.polygon[index].copy(polygonPositions[index]);\n      }\n    },\n    [center.position, polygonPositions]\n  );\n\n  const ref = useUpdate<ConeGeometry>(\n    ({ vertices }) => {\n      const tile = getTile(vertices);\n      applyPolygon(tile);\n      applyElevation(tile);\n    },\n    [applyElevation, applyPolygon]\n  );\n\n  return (\n    <coneGeometry\n      args={[1, 1, polygon.length]}\n      name=\"TileGeometry\"\n      ref={ref}\n      {...props}\n    />\n  );\n};\n\nexport default TileGeometry;\n","import React, { FC } from \"react\";\nimport { PlanetSettings, PlanetTile } from \"../../objects/planet/planet\";\nimport TileGeometry from \"./Geometry\";\n\nconst TileMesh: FC<{ tile: PlanetTile; settings: PlanetSettings }> = ({\n  tile,\n  settings,\n  ...props\n}) => {\n  return (\n    <mesh name=\"TileMesh\" {...props}>\n      <meshStandardMaterial color={tile.color} />\n      <TileGeometry\n        center={tile.center}\n        polygon={tile.polygon}\n        settings={settings}\n      />\n    </mesh>\n  );\n};\n\nexport default TileMesh;\n","import { geoDelaunay } from \"d3-geo-voronoi\";\nimport PoissonDiskSampling from \"poisson-disk-sampling\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport SimplexNoise from \"simplex-noise\";\nimport { Vector3 } from \"three\";\nimport TileMesh from \"../Tile\";\nimport {\n  toGeographicalCoordinates,\n  toSphericalCoordinates,\n  toSphericalDistribution,\n} from \"../../objects/planet\";\nimport {\n  GeographicalCoordinates,\n  PlanetSettings,\n  PlanetTile,\n  PlanetTilePoint,\n  SphericalCoordinates,\n} from \"../../objects/planet/planet\";\n\nexport const Planet: FC<{ settings: PlanetSettings }> = ({ settings }) => {\n  const [tiles, setTiles] = useState<PlanetTile[]>([]);\n\n  const poisson = useMemo(\n    () =>\n      new PoissonDiskSampling(\n        {\n          shape: [1.0, 1.0],\n          minDistance: settings.minDistance,\n          tries: settings.tries,\n        },\n        seedrandom(settings.seed)\n      ),\n    [settings.minDistance, settings.seed, settings.tries]\n  );\n\n  const simplex = useMemo(() => new SimplexNoise(settings.seed), [\n    settings.seed,\n  ]);\n  const noise = useCallback(\n    (point: Vector3) => {\n      const { x, y, z } = point.clone().setLength(settings.noiseRadius);\n      return simplex.noise3D(x, y, z);\n    },\n    [settings.noiseRadius, simplex]\n  );\n\n  const toTilePoint = useCallback(\n    ([phi, theta]: SphericalCoordinates): PlanetTilePoint => {\n      const position = new Vector3();\n      position.setFromSphericalCoords(1, phi, theta);\n      return { noise: noise(position), position };\n    },\n    [noise]\n  );\n\n  useEffect(() => {\n    const sphericalCoordinates = poisson.fill().map(toSphericalDistribution);\n    const geographicalCoordinates = sphericalCoordinates.map(\n      toGeographicalCoordinates\n    );\n    const delaunay: {\n      centers: GeographicalCoordinates[];\n      polygons: number[][];\n    } = geoDelaunay(geographicalCoordinates);\n    const points = delaunay.centers\n      .map(toSphericalCoordinates)\n      .map(toTilePoint);\n    const nextTiles = delaunay.polygons.map((polygon, c) => {\n      const center = toTilePoint(sphericalCoordinates[c]);\n      return {\n        center,\n        color: settings.biomes.find((c) => center.noise <= c.noiseMax)?.color,\n        polygon: polygon.map((p) => points[p]),\n      };\n    });\n    setTiles(nextTiles);\n  }, [poisson, settings.biomes, toTilePoint]);\n\n  const timeKey = Date.now().toString();\n\n  return (\n    <group name=\"Planet\">\n      {tiles.map((tile, index) => (\n        <TileMesh key={`${timeKey}-${index}`} settings={settings} tile={tile} />\n      ))}\n    </group>\n  );\n};\n\nexport default Planet;\n","import { createContext, useContext } from \"react\";\nimport { ControlsContext } from \"./controls\";\n\nexport const Controls = createContext<ControlsContext | null>(null);\n\nconst Context = () => useContext(Controls) as ControlsContext;\nexport default Context;\n","import React, { FC, useEffect, useRef } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Controls } from \"./index\";\nimport { ControlsProps } from \"./controls\";\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\n\nextend({ OrbitControls });\n\nexport const ControlsProvider: FC<ControlsProps> = ({ children, ...props }) => {\n  const ref = useRef<OrbitControls>();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    if (ref && ref.current) {\n      ref.current.update();\n    }\n  });\n\n  useEffect(() => {\n    camera.position.set(0, 0, 16);\n  }, [camera.position]);\n\n  return (\n    <Controls.Provider value={props}>\n      <orbitControls args={[camera, gl.domElement]} ref={ref} />\n      {children}\n    </Controls.Provider>\n  );\n};\n\nexport default ControlsProvider;\n","import { createContext, useContext } from \"react\";\nimport { SettingsContext } from \"./settings\";\n\nexport const defaultSettings: SettingsContext = {\n  planet: {\n    biomes: [\n      { color: \"steelblue\", noiseMax: 0 },\n      { color: \"lemonchiffon\", noiseMax: 1 / 6 },\n      { color: \"yellowgreen\", noiseMax: 2 / 6 },\n      { color: \"forestgreen\", noiseMax: 3 / 6 },\n      { color: \"burlywood\", noiseMax: 4 / 6 },\n      { color: \"darkgrey\", noiseMax: 5 / 6 },\n      { color: \"snow\", noiseMax: 1 },\n    ],\n    elevationOffset: 1 / 2,\n    elevationScale: 1,\n    noiseMin: 0,\n    noiseRadius: 1,\n    minDistance: 0.02,\n    position: [0, 0, 0],\n    radius: 8,\n    seed: Date.now().toString(),\n    tries: 8,\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(defaultSettings);\n\nconst Context = () => useContext(Settings);\nexport default Context;\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport { FormGroup, InputGroup, NumericInput, Slider } from \"@blueprintjs/core\";\nimport { defaultSettings, Settings } from \"./index\";\nimport { SettingsContext, SettingsProps } from \"./settings\";\n\nexport const SettingsProvider: FC<SettingsProps> = ({ children }) => {\n  const [planet, setPlanet] = useState<SettingsContext[\"planet\"]>(\n    defaultSettings[\"planet\"]\n  );\n  const onChange = (key: string) => ({\n    currentTarget: { value },\n  }: ChangeEvent<HTMLInputElement>) =>\n    setPlanet((prevSettings) => ({ ...prevSettings, [key]: value }));\n  // const onRangeChange = (keyMin: string, keyMax: string) => ([\n  //   valueMin,\n  //   valueMax,\n  // ]: [number, number]) =>\n  //   setPlanet((prevSettings) => ({\n  //     ...prevSettings,\n  //     [keyMax]: valueMax,\n  //     [keyMin]: valueMin,\n  //   }));\n  const onValueChange = (key: string) => (value: number) =>\n    setPlanet((prevSettings) => ({ ...prevSettings, [key]: value }));\n\n  return (\n    <Settings.Provider value={{ planet }}>\n      {children}\n      <form className=\"Settings\">\n        <FormGroup className=\"Settings-seed\" label=\"Seed\">\n          <InputGroup\n            defaultValue={planet.seed}\n            fill={true}\n            onChange={onChange(\"seed\")}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-radius\" label=\"Radius\">\n          <NumericInput\n            fill={true}\n            min={0}\n            onValueChange={onValueChange(\"radius\")}\n            value={planet.radius}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"Settings-minDistance\"\n          label=\"Sampling Minimum Distance\"\n        >\n          <NumericInput\n            fill={true}\n            min={0.01}\n            minorStepSize={null}\n            onValueChange={onValueChange(\"minDistance\")}\n            stepSize={0.01}\n            value={planet.minDistance}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-tries\" label=\"Sampling tries\">\n          <NumericInput\n            fill={true}\n            min={2}\n            minorStepSize={null}\n            onValueChange={onValueChange(\"tries\")}\n            value={planet.tries}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseRadius\" label=\"Noise Radius\">\n          <NumericInput\n            fill={true}\n            min={0}\n            minorStepSize={null}\n            onValueChange={onValueChange(\"noiseRadius\")}\n            stepSize={0.1}\n            value={planet.noiseRadius}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-noiseMin\" label=\"Minimum Noise\">\n          <Slider\n            labelStepSize={0.5}\n            max={1}\n            min={-1}\n            onChange={onValueChange(\"noiseMin\")}\n            stepSize={0.1}\n            value={planet.noiseMin}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"Settings-elevationOffset\"\n          label=\"Elevation Offset\"\n        >\n          <Slider\n            labelStepSize={0.25}\n            max={1}\n            min={0}\n            onChange={onValueChange(\"elevationOffset\")}\n            stepSize={0.01}\n            value={planet.elevationOffset}\n          />\n        </FormGroup>\n        <FormGroup className=\"Settings-elevationScale\" label=\"Elevation Scale\">\n          <NumericInput\n            fill={true}\n            min={0}\n            minorStepSize={null}\n            onValueChange={onValueChange(\"elevationScale\")}\n            value={planet.elevationScale}\n          />\n        </FormGroup>\n      </form>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { FC } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport Planet from \"./components/Planet\";\nimport ControlsProvider from \"./contexts/controls/Provider\";\nimport useSettings from \"./contexts/settings\";\nimport SettingsProvider from \"./contexts/settings/Provider\";\n\nconst Scene: FC = () => {\n  const settings = useSettings();\n  return (\n    <Canvas className=\"Scene\">\n      <ambientLight />\n      <ControlsProvider>\n        <pointLight position={[16, 16, 16]} />\n        <Planet settings={settings.planet} />\n      </ControlsProvider>\n    </Canvas>\n  );\n};\n\nconst App: FC = () => {\n  return (\n    <SettingsProvider>\n      <Scene />\n    </SettingsProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}