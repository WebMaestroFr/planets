{"version":3,"sources":["contexts/settings/index.tsx","objects/planet/index.tsx","components/Planet/Tile.tsx","components/Planet/index.tsx","hooks/tiles.ts","contexts/controls/index.tsx","contexts/controls/Provider.tsx","components/Planet/Form.tsx","contexts/settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultSettings","planet","biomes","color","noiseMax","elevationOffset","elevationScale","noiseMin","noiseRadius","minDistance","position","radius","seed","Date","now","toString","tries","Settings","createContext","Context","useContext","toGeographicalCoordinates","phi","theta","MathUtils","radToDeg","toSphericalCoordinates","lng","lat","degToRad","toSphericalDistribution","u","v","Math","PI","acos","PlanetTile","center","polygon","props","useSettings","useMemo","find","biome","noise","polygonNoises","map","point","polygonPositions","applyNoise","useCallback","vertex","elevation","max","setLength","getElevationNoise","applyElevation","tile","centerElevation","index","length","elevationNoise","applyPolygon","origin","set","copy","ref","useUpdate","vertices","slice","getTile","geometry","name","args","Planet","tiles","useState","setTiles","poisson","PoissonDiskSampling","shape","seedrandom","simplex","SimplexNoise","clone","x","y","z","noise3D","toTilePoint","Vector3","setFromSphericalCoords","useEffect","sphericalCoordinates","fill","geographicalCoordinates","delaunay","geoDelaunay","points","centers","nextTiles","polygons","c","p","useTiles","timeKey","Tile","Controls","extend","OrbitControls","ControlsProvider","children","useRef","useThree","camera","gl","useFrame","current","update","Provider","value","domElement","PlanetForm","onUpdate","settings","onChange","key","currentTarget","prevSettings","onValueChange","className","label","defaultValue","min","minorStepSize","stepSize","labelStepSize","SettingsProvider","initialValue","time","setValue","debouncedValue","setDebouncedValue","debounce","setTimeout","clearTimeout","useDebounce","debouncedPlanet","setPlanet","Scene","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252c0f66.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\nimport { SettingsContext } from \"./settings\";\n\nexport const defaultSettings: SettingsContext = {\n  planet: {\n    biomes: [\n      { color: \"steelblue\", noiseMax: 0 },\n      { color: \"lemonchiffon\", noiseMax: 1 / 6 },\n      { color: \"yellowgreen\", noiseMax: 2 / 6 },\n      { color: \"forestgreen\", noiseMax: 3 / 6 },\n      { color: \"burlywood\", noiseMax: 4 / 6 },\n      { color: \"darkgrey\", noiseMax: 5 / 6 },\n      { color: \"snow\", noiseMax: 1 },\n    ],\n    elevationOffset: 1 / 2,\n    elevationScale: 1,\n    noiseMin: 0,\n    noiseRadius: 1,\n    minDistance: 0.04,\n    position: [0, 0, 0],\n    radius: 8,\n    seed: Date.now().toString(),\n    tries: 8,\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(defaultSettings);\n\nconst Context = () => useContext(Settings);\nexport default Context;\n","import { MathUtils, Vector3 } from \"three\";\nimport {\n  GeographicalCoordinates,\n  PlanetTilePolygon,\n  SphericalCoordinates,\n} from \"./planet\";\n\nexport const getTile = (vertices: Vector3[]): PlanetTilePolygon => ({\n  center: vertices[vertices.length - 1],\n  origin: vertices[0],\n  polygon: vertices.slice(1, vertices.length - 1),\n});\n\nexport const toGeographicalCoordinates = ([\n  phi,\n  theta,\n]: SphericalCoordinates): GeographicalCoordinates => [\n  MathUtils.radToDeg(theta),\n  90 - MathUtils.radToDeg(phi),\n];\nexport const toSphericalCoordinates = ([\n  lng,\n  lat,\n]: GeographicalCoordinates): SphericalCoordinates => [\n  MathUtils.degToRad(90 - lat),\n  MathUtils.degToRad(lng),\n];\n// https://www.jasondavies.com/maps/random-points/\nexport const toSphericalDistribution = ([u, v]: [\n  number,\n  number\n]): SphericalCoordinates => [\n  Math.PI - Math.acos(2 * v - 1),\n  2 * Math.PI * u - Math.PI,\n];\n","import React, { FC, useCallback, useMemo } from \"react\";\nimport { useUpdate } from \"react-three-fiber\";\nimport { ConeGeometry, Mesh, Vector3 } from \"three\";\nimport useSettings from \"../../contexts/settings\";\nimport { getTile } from \"../../objects/planet\";\nimport {\n  PlanetTilePoint,\n  PlanetTilePolygon,\n} from \"../../objects/planet/planet\";\n\nconst PlanetTile: FC<{\n  center: PlanetTilePoint;\n  polygon: PlanetTilePoint[];\n}> = ({ center, polygon, ...props }) => {\n  const {\n    planet: { biomes, elevationOffset, elevationScale, noiseMin, radius },\n  } = useSettings();\n\n  const color = useMemo(\n    () => biomes.find((biome) => center.noise <= biome.noiseMax)?.color,\n    [biomes, center.noise]\n  );\n\n  const polygonNoises = useMemo(() => polygon.map((point) => point.noise), [\n    polygon,\n  ]);\n\n  const polygonPositions = useMemo(\n    () => polygon.map((point) => point.position),\n    [polygon]\n  );\n\n  const applyNoise = useCallback(\n    (vertex: Vector3, noise: number) => {\n      const elevation = radius + Math.max(noiseMin, noise) * elevationScale;\n      vertex.setLength(elevation);\n      return elevation;\n    },\n    [elevationScale, noiseMin, radius]\n  );\n\n  const getElevationNoise = useCallback(\n    (noise: number) =>\n      center.noise * elevationOffset + noise * (1 - elevationOffset),\n    [center.noise, elevationOffset]\n  );\n\n  const applyElevation = useCallback(\n    (tile: PlanetTilePolygon) => {\n      const centerElevation = applyNoise(tile.center, center.noise);\n      if (center.noise <= noiseMin) {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          tile.polygon[index].setLength(centerElevation);\n        }\n      } else {\n        for (let index = 0; index < tile.polygon.length; index++) {\n          const elevationNoise = getElevationNoise(polygonNoises[index]);\n          applyNoise(tile.polygon[index], elevationNoise);\n        }\n      }\n    },\n    [applyNoise, center.noise, getElevationNoise, polygonNoises, noiseMin]\n  );\n\n  const applyPolygon = useCallback(\n    (tile: PlanetTilePolygon) => {\n      tile.origin.set(0, 0, 0);\n      tile.center.copy(center.position);\n      for (let index = 0; index < tile.polygon.length; index++) {\n        tile.polygon[index].copy(polygonPositions[index]);\n      }\n    },\n    [center.position, polygonPositions]\n  );\n\n  const ref = useUpdate<Mesh<ConeGeometry>>(\n    ({ geometry: { vertices } }) => {\n      const tile = getTile(vertices);\n      applyPolygon(tile);\n      applyElevation(tile);\n    },\n    [applyElevation, applyPolygon]\n  );\n\n  return (\n    <mesh name=\"PlanetTile\" {...props} ref={ref}>\n      <meshStandardMaterial color={color} />\n      <coneGeometry args={[1, 1, polygon.length]} />\n    </mesh>\n  );\n};\n\nexport default PlanetTile;\n","import React, { FC } from \"react\";\nimport useSettings from \"../../contexts/settings\";\nimport { useTiles } from \"../../hooks/tiles\";\nimport Tile from \"./Tile\";\n\nexport const Planet: FC = () => {\n  const { planet } = useSettings();\n  const tiles = useTiles(planet);\n\n  const timeKey = Date.now().toString();\n\n  return (\n    <group name=\"Planet\">\n      {tiles.map((tile, index) => (\n        <Tile\n          key={`${timeKey}-${index}`}\n          center={tile.center}\n          polygon={tile.polygon}\n        />\n      ))}\n    </group>\n  );\n};\n\nexport default Planet;\n","import { geoDelaunay } from \"d3-geo-voronoi\";\nimport PoissonDiskSampling from \"poisson-disk-sampling\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport seedrandom from \"seedrandom\";\nimport SimplexNoise from \"simplex-noise\";\nimport { Vector3 } from \"three\";\nimport {\n  toGeographicalCoordinates,\n  toSphericalCoordinates,\n  toSphericalDistribution,\n} from \"../objects/planet\";\nimport {\n  GeographicalCoordinates,\n  PlanetSettings,\n  PlanetTile,\n  PlanetTilePoint,\n  SphericalCoordinates,\n} from \"../objects/planet/planet\";\n\nexport function useTiles({\n  minDistance,\n  noiseRadius,\n  seed,\n  tries,\n}: PlanetSettings) {\n  const [tiles, setTiles] = useState<PlanetTile[]>([]);\n\n  const poisson = useMemo(\n    () =>\n      new PoissonDiskSampling(\n        {\n          shape: [1.0, 1.0],\n          minDistance,\n          tries,\n        },\n        seedrandom(seed)\n      ),\n    [minDistance, seed, tries]\n  );\n\n  const simplex = useMemo(() => new SimplexNoise(seed), [seed]);\n  const noise = useCallback(\n    (point: Vector3) => {\n      const { x, y, z } = point.clone().setLength(noiseRadius);\n      return simplex.noise3D(x, y, z);\n    },\n    [noiseRadius, simplex]\n  );\n\n  const toTilePoint = useCallback(\n    ([phi, theta]: SphericalCoordinates): PlanetTilePoint => {\n      const position = new Vector3();\n      position.setFromSphericalCoords(1, phi, theta);\n      return { noise: noise(position), position };\n    },\n    [noise]\n  );\n\n  useEffect(() => {\n    const sphericalCoordinates = poisson.fill().map(toSphericalDistribution);\n    const geographicalCoordinates = sphericalCoordinates.map(\n      toGeographicalCoordinates\n    );\n    const delaunay: {\n      centers: GeographicalCoordinates[];\n      polygons: number[][];\n    } = geoDelaunay(geographicalCoordinates);\n    const points = delaunay.centers\n      .map(toSphericalCoordinates)\n      .map(toTilePoint);\n    const nextTiles = delaunay.polygons.map((polygon, c) => {\n      const center = toTilePoint(sphericalCoordinates[c]);\n      return {\n        center,\n        polygon: polygon.map((p) => points[p]),\n      };\n    });\n    setTiles(nextTiles);\n  }, [poisson, toTilePoint]);\n\n  return tiles;\n}\n","import { createContext, useContext } from \"react\";\nimport { ControlsContext } from \"./controls\";\n\nexport const Controls = createContext<ControlsContext | null>(null);\n\nconst Context = () => useContext(Controls) as ControlsContext;\nexport default Context;\n","import React, { FC, useEffect, useRef } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Controls } from \"./index\";\nimport { ControlsProps } from \"./controls\";\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\n\nextend({ OrbitControls });\n\nexport const ControlsProvider: FC<ControlsProps> = ({ children, ...props }) => {\n  const ref = useRef<OrbitControls>();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    if (ref && ref.current) {\n      ref.current.update();\n    }\n  });\n\n  useEffect(() => {\n    camera.position.set(0, 0, 16);\n  }, [camera.position]);\n\n  return (\n    <Controls.Provider value={props}>\n      <orbitControls args={[camera, gl.domElement]} ref={ref} />\n      {children}\n    </Controls.Provider>\n  );\n};\n\nexport default ControlsProvider;\n","import React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n} from \"react\";\nimport { FormGroup, InputGroup, NumericInput, Slider } from \"@blueprintjs/core\";\nimport { PlanetSettings } from \"../../objects/planet/planet\";\n\nexport const PlanetForm: FC<{\n  onUpdate: Dispatch<SetStateAction<PlanetSettings>>;\n  settings: PlanetSettings;\n}> = ({\n  onUpdate,\n  settings: {\n    elevationOffset,\n    elevationScale,\n    minDistance,\n    noiseMin,\n    noiseRadius,\n    radius,\n    seed,\n    tries,\n  },\n}) => {\n  const onChange = useCallback(\n    (key: string) => ({\n      currentTarget: { value },\n    }: ChangeEvent<HTMLInputElement>) =>\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value })),\n    [onUpdate]\n  );\n  const onValueChange = useCallback(\n    (key: string) => (value: number) =>\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value })),\n    [onUpdate]\n  );\n  return (\n    <form className=\"PlanetForm\">\n      <FormGroup className=\"PlanetForm-seed\" label=\"Seed\">\n        <InputGroup\n          defaultValue={seed}\n          fill={true}\n          onChange={onChange(\"seed\")}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-radius\" label=\"Radius\">\n        <NumericInput\n          fill={true}\n          min={0}\n          onValueChange={onValueChange(\"radius\")}\n          value={radius}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"PlanetForm-minDistance\"\n        label=\"Sampling Minimum Distance\"\n      >\n        <NumericInput\n          fill={true}\n          min={0.01}\n          minorStepSize={null}\n          onValueChange={onValueChange(\"minDistance\")}\n          stepSize={0.01}\n          value={minDistance}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-tries\" label=\"Sampling tries\">\n        <NumericInput\n          fill={true}\n          min={2}\n          minorStepSize={null}\n          onValueChange={onValueChange(\"tries\")}\n          value={tries}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-noiseRadius\" label=\"Noise Radius\">\n        <NumericInput\n          fill={true}\n          min={0}\n          minorStepSize={null}\n          onValueChange={onValueChange(\"noiseRadius\")}\n          stepSize={0.1}\n          value={noiseRadius}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-noiseMin\" label=\"Minimum Noise\">\n        <Slider\n          labelStepSize={0.5}\n          max={1}\n          min={-1}\n          onChange={onValueChange(\"noiseMin\")}\n          stepSize={0.1}\n          value={noiseMin}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"PlanetForm-elevationOffset\"\n        label=\"Elevation Offset\"\n      >\n        <Slider\n          labelStepSize={0.25}\n          max={1}\n          min={0}\n          onChange={onValueChange(\"elevationOffset\")}\n          stepSize={0.01}\n          value={elevationOffset}\n        />\n      </FormGroup>\n      <FormGroup className=\"PlanetForm-elevationScale\" label=\"Elevation Scale\">\n        <NumericInput\n          fill={true}\n          min={0}\n          minorStepSize={null}\n          onValueChange={onValueChange(\"elevationScale\")}\n          stepSize={0.1}\n          value={elevationScale}\n        />\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default PlanetForm;\n","import React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport { defaultSettings, Settings } from \"./index\";\nimport PlanetForm from \"../../components/Planet/Form\";\nimport { PlanetSettings } from \"../../objects/planet/planet\";\n\nfunction useDebounce<T>(\n  initialValue: T,\n  time: number\n): [T, T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    const debounce = setTimeout(() => {\n      setDebouncedValue(value);\n    }, time);\n    return () => {\n      clearTimeout(debounce);\n    };\n  }, [value, time]);\n\n  return [debouncedValue, value, setValue];\n}\n\nexport const SettingsProvider: FC = ({ children }) => {\n  const [debouncedPlanet, planet, setPlanet] = useDebounce<PlanetSettings>(\n    defaultSettings[\"planet\"],\n    400\n  );\n\n  return (\n    <Settings.Provider value={{ planet: debouncedPlanet }}>\n      {children}\n      <div className=\"Settings\">\n        <PlanetForm onUpdate={setPlanet} settings={planet} />\n      </div>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { FC } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport Planet from \"./components/Planet\";\nimport ControlsProvider from \"./contexts/controls/Provider\";\nimport useSettings, { Settings } from \"./contexts/settings\";\nimport SettingsProvider from \"./contexts/settings/Provider\";\n\nconst Scene: FC = () => {\n  const settings = useSettings();\n  return (\n    <Canvas className=\"Scene\">\n      <ambientLight />\n      <ControlsProvider>\n        <pointLight position={[16, 16, 16]} />\n        <Settings.Provider value={settings}>\n          <Planet />\n        </Settings.Provider>\n      </ControlsProvider>\n    </Canvas>\n  );\n};\n\nconst App: FC = () => {\n  return (\n    <SettingsProvider>\n      <Scene />\n    </SettingsProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}